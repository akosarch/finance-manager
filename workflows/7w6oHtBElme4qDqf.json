{
  "active": false,
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Get accounts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call Set accounts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        []
      ]
    },
    "Call Set accounts": {
      "main": [
        [
          {
            "node": "Get accounts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get accounts": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-25T14:26:25.556Z",
  "id": "7w6oHtBElme4qDqf",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Get categories",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "mcc",
              "type": "number"
            },
            {
              "name": "description"
            }
          ]
        }
      },
      "id": "bd1ce142-416f-4d26-b42c-b3434977ac30",
      "typeVersion": 1.1,
      "name": "Start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        0,
        -272
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "35572f4c-2cc6-4d6f-860b-dfee9a52a1df",
              "leftValue": "={{ $json.cache.isEmpty() }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "a37ab1bc-ea40-4187-9dd1-7c8f47004bf7",
              "leftValue": "={{ $json.cache.categories.isEmpty() }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        448,
        -336
      ],
      "id": "3f4e55f5-7085-446b-8ae4-f208a9f0d15e",
      "name": "If",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "// HELPERS\nconst toNum = v => (v == null || v === '' ? null : Number(v))\nconst norm  = s => (s ?? '').toString().toLowerCase().trim()\n\n// INPUTS\nconst { mcc, description } = $('Start').first().json || {}\nconst categories = JSON.parse($input.first().json?.cache?.categories)\n\n// NORMALIZED INPUTS\nconst nmcc = toNum(mcc)\nconst ndesc = norm(description)\n\n// MATCHERS\nconst hasKeywordMatch = (cat, text) =>\n  Array.isArray(cat.keyword) &&\n  text &&\n  cat.keyword.some(k => text.includes(norm(k)))\n\nconst hasMccMatch = (cat, code) =>\n  Array.isArray(cat.mcc) &&\n  code != null &&\n  cat.mcc.some(c => Number(c) === code)\n\n// MAIN\nif (nmcc != null || (ndesc ?? '') !== '') {\n  let matched\n  \n  // 1. keyword match first\n  matched = categories.find(cat => hasKeywordMatch(cat, ndesc))\n  if (matched) return matched\n\n  // 2. mcc match second\n  matched = categories.find(cat => hasMccMatch(cat, nmcc))\n  if (matched) return matched\n\n  // 3. no match → nothing assigned\n  return {}\n} else {\n  // No inputs → return all categories (optional fallback)\n  return categories\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        -352
      ],
      "id": "62549f2f-5d0d-4010-9b5b-81268a163740",
      "name": "Code",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "oHqkjRKRQjyjBxl5",
          "mode": "list",
          "cachedResultName": "Set categories"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        672,
        -176
      ],
      "name": "Call Set accounts",
      "id": "4a73acf5-6d22-4329-98de-64ab5cbaa2d1"
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "cache",
        "key": "financeManager",
        "options": {
          "dotNotation": true
        }
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        224,
        -272
      ],
      "id": "13213c37-aff6-491d-a29e-0ec964ce7791",
      "name": "Get accounts",
      "credentials": {
        "redis": {
          "id": "Mrfqpfn7I6IiBzeh",
          "name": "Redis"
        }
      }
    }
  ],
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-08-25T14:26:25.556Z",
      "updatedAt": "2025-08-25T14:26:25.556Z",
      "role": "workflow:owner",
      "workflowId": "7w6oHtBElme4qDqf",
      "projectId": "BFkLzpzN26OoI8IT"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-09-03T18:10:21.479Z",
      "updatedAt": "2025-09-03T18:10:21.479Z",
      "id": "hyYDR00qVEuE8c9t",
      "name": "finance-manager"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-09-03T18:11:17.028Z",
  "versionId": "d55bc9d3-1c6b-4fa9-a693-c8c96735c581"
}